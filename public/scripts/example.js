/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentName">
          {this.props.name}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    //this.loadCommentsFromServer();
    //setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Club Registration Form</h1>
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment name={comment.name} key={comment.id} text={comment.text}
        school={comment.school} year={comment.year}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {name: '', text: '', school:'', year:''};
  },
  handleNameChange: function(e) {
    this.setState({name: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSchoolChange: function (changeEvent) {
    this.setState({
    school: changeEvent.target.value});
  },
  handleYearChange: function (changeEvent) {
    this.setState({
    year: changeEvent.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var text = this.state.text.trim();
    var school = this.state.school;
    var year = this.state.year;
    if (!text || !name || !school || !year) {
      return;
    }
    this.props.onCommentSubmit({name: name, text: text, school: school, year: year});
    this.setState({name: '', text: '', school:'', year:''});
  },
  render: function() {
    return (
      <div>
        <form className="commentForm" onSubmit={this.handleSubmit}>
        <h2>Account Details</h2>
          <ul className="form-fields">
            <li>
              <label>Name</label>
              <input
                type="text"
                placeholder="Your name"
                value={this.state.name}
                onChange={this.handleNameChange}/>
            </li>
            <li>
              <label>Email</label>
              <input
                type="text"
                placeholder="email@columbia.edu"
                value={this.state.text}
                onChange={this.handleTextChange}/>
            </li>
            <li>
              <label>Your School</label>
              <div className="radio">
              <label>
                <input type="radio" value="School of Engineering and Applied Sciences" 
                              checked={this.state.school === 'School of Engineering and Applied Sciences'} 
                              onChange={this.handleSchoolChange} />
                School of Engineering and Applied Sciences
              </label>
              <label>
                <input type="radio" value="Columbia College" 
                              checked={this.state.school === 'Columbia College'} 
                              onChange={this.handleSchoolChange} />
                Columbia College
              </label>
              <label>
                <input type="radio" value="General Studies" 
                              checked={this.state.school === 'General Studies'} 
                              onChange={this.handleSchoolChange} />
                General Studies
              </label>
              <label>
                <input type="radio" value="Barnard" 
                              checked={this.state.school === 'Barnard'} 
                              onChange={this.handleSchoolChange} />
                Barnard
              </label>
              </div>
            </li>

            <li>
              <label>Graduating Year</label>
              <div className="radio">
              <label>
                <input type="radio" value="2017" 
                              checked={this.state.year === '2017'} 
                              onChange={this.handleYearChange} />
                2017
              </label>
              <label>
                <input type="radio" value="2018" 
                              checked={this.state.year === '2018'} 
                              onChange={this.handleYearChange} />
                2018
              </label>
              <label>
                <input type="radio" value="2019" 
                              checked={this.state.year === '2019'} 
                              onChange={this.handleYearChange} />
                2019
              </label>
              <label>
                <input type="radio" value="2020" 
                              checked={this.state.year === '2020'} 
                              onChange={this.handleYearChange} />
                2020
              </label>
              </div>
            </li>
            <input type="submit" value="Register for Club" />
            </ul>
        </form>
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);
